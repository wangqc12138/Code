什么是IO多路复用
    在一个线程中监听多个网络IO事件，也就是多个文件描述符 
epoll的lt和et
    lt水平触发 效率低于et 只要数据没有被获取，内核会不断通知
    et边沿触发 效率高于lt 数据只会触发一次，减少了epoll的系统调用
三次握手 四次挥手
    connect -- accept
    close -- time_wait
    time_wait 确认消息被接受 保证迟到的报文段有足够时间被识别并丢弃
connect阻塞
    定时器避免
    非阻塞模式
    异步传输机制 会立即返回
客户端掉线重启
    复位报文段
TTL作用
    time to live 报文存活时间
    traceroute
路由表
    决定如何将包从一个子网传送到另一个子网
TCP重发机制的实现
    滑动窗口
    选择重传
TCP UDP区别

select epoll poll 优劣对比

三次握手
    客户端给服务端发送一个syn报文 处于synsend状态
    服务器发送syn+1的ack应答 发送syn 处于synrevd
    客户端发送ack establised状态
    服务端接受ack established状态
    半连接队列 处于synrevd状态 重传次数
    第三次握手是可以带数据的
    前两次带数据会让服务器更加容易收到攻击
四次挥手
    第一次挥手 客户端发送fin报文 指定一个序列号 客户端处于closewait1状态
    第二次挥手 服务端收到fin报文 发送ack应答报文 把序列号+1 服务端处于closewait2状态
    第三次挥手 服务端发送fin报文 指定一个序列号 服务端处于lastack状态
    第四次挥手 客户端收到ack应答 发送ack 处于timewait状态
    需要确认对方成功接受ack 网路上没有交互的报文 
TCP和UDP的区别
    tcp面向连接
    tcp点对点 
    tcp可靠 传送的数据无差错不丢失不重复按序到达
        三次握手 四次挥手确保传输信道是可靠的
        采用ARQ协议（回退N；超时重传）确保正确性 采用滑动窗口进行流量控制
        慢开始 拥塞避免 快重传 快恢复 拥塞控制
    tcp全双工通信
    tcp面向字节流

    udp无连接
    udp不可靠
    udp面向报文 不合并不拆分
    udp没有拥塞控制
    udp支持一对一 一对多 多对多
arp协议
    完成ip和物理地址的映射
保活计时器
    如果长时间没接收到客户端的数据 就发送一个探测报文段 如果没响应就关闭连接
tcp可靠传输
    数据包校验
    失序数据包重排序
    丢弃重复数据
    应答机制
    超时重发
    流量控制
停止等待协议
    没发完一个分组就停止发送，在网路中只存在一个报文
ARQ协议
    自动重传请求
        超时重传
    连续ARQ
        发送方维持一个发送窗口 累计确认
滑动窗口
    流量控制机制
    意味着接受方还有多大得到缓冲区
流量控制
    滑动窗口
TCP拥塞控制
    防止过多的数据注入到网络中
    拥塞窗口取决于网络的拥塞程度动态变化 
    发送窗口是拥塞窗口和接受窗口中较小的一个
    慢开始
        指数级增长
    拥塞避免
        到达一个值后线性增长
    快重传 快恢复
        连续接收到ack 重传
粘包
    tcp基于字节流 没有边界
    nagle算法合并发送
    读取不及时
分包机制
    特殊字符
    包头增加长度
    udp没有粘包情况 发送报文不合并也不拆分
