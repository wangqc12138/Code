#include "head.h"
/*
给你一个正整数 n ，开始时，它放在桌面上。在 109 天内，每天都要执行下述步骤：

    对于出现在桌面上的每个数字 x ，找出符合 1 <= i <= n 且满足 x % i == 1 的所有数字 i 。
    然后，将这些数字放在桌面上。

返回在 109 天之后，出现在桌面上的 不同 整数的数目。

注意：

    一旦数字放在桌面上，则会一直保留直到结束。
    % 表示取余运算。例如，14 % 3 等于 2 。

 */
class Solution
{
public:
    int distinctIntegers(int n)
    {
        return n - 1;
    }
};
/*
现在有一个正凸多边形，其上共有 n 个顶点。顶点按顺时针方向从 0 到 n - 1 依次编号。每个顶点上 正好有一只猴子 。下图中是一个 6 个顶点的凸多边形。

每个猴子同时移动到相邻的顶点。顶点 i 的相邻顶点可以是：

    顺时针方向的顶点 (i + 1) % n ，或
    逆时针方向的顶点 (i - 1 + n) % n 。

如果移动后至少有两个猴子位于同一顶点，则会发生 碰撞 。

返回猴子至少发生 一次碰撞 的移动方法数。由于答案可能非常大，请返回对 109+7 取余后的结果。

注意，每只猴子只能移动一次。
 */
class Solution
{
public:
    int monkeyMove(int n)
    {
        int res = 2;
        for (int i = 1; i < n; i++)
        {
            res *= 2;
            res %= 1000000007;
        }
        return res - 2;
    }
};