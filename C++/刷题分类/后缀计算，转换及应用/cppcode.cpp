#include "head.h"
/*
根据 逆波兰表示法，求表达式的值。
有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
150
*/
/*
给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。
224
*/
/*
实现一个基本的计算器来计算简单的表达式字符串。
表达式字符串只包含非负整数，算符 +、-、*、/ ，左括号 ( 和右括号 ) 。整数除法需要 向下截断 。
你可以假定给定的表达式总是有效的。所有的中间结果的范围为 [-231, 231 - 1] 。
772
*/
/*
给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。
整数除法仅保留整数部分。
227
*/
/*
如果你熟悉 Shell 编程，那么一定了解过花括号展开，它可以用来生成任意字符串。

花括号展开的表达式可以看作一个由 花括号、逗号 和 小写英文字母 组成的字符串，定义下面几条语法规则：

    如果只给出单一的元素 x，那么表达式表示的字符串就只有 "x"。R(x) = {x}
        例如，表达式 "a" 表示字符串 "a"。
        而表达式 "w" 就表示字符串 "w"。
    当两个或多个表达式并列，以逗号分隔，我们取这些表达式中元素的并集。R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...
        例如，表达式 "{a,b,c}" 表示字符串 "a","b","c"。
        而表达式 "{{a,b},{b,c}}" 也可以表示字符串 "a","b","c"。
    要是两个或多个表达式相接，中间没有隔开时，我们从这些表达式中各取一个元素依次连接形成字符串。R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}
        例如，表达式 "{a,b}{c,d}" 表示字符串 "ac","ad","bc","bd"。
    表达式之间允许嵌套，单一元素与表达式的连接也是允许的。
        例如，表达式 "a{b,c,d}" 表示字符串 "ab","ac","ad"​​​​​​。
        例如，表达式 "a{b,c}{d,e}f{g,h}" 可以表示字符串 "abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"。

给出表示基于给定语法规则的表达式 expression，返回它所表示的所有字符串组成的有序列表。

假如你希望以「集合」的概念了解此题，也可以通过点击 “显示英文描述” 获取详情。
1096
 */